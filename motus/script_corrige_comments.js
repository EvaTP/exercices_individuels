function tryWord(word, base) {
	// TODO: fix jeu sensible √† la casse.
	// word : le mot que l'utilisateur a entr√©. Base : le mot √† deviner
	// initialisation des tableaux pour stocker les lettres devin√©es
	let wellPlaced = [];  // lettres correctes et √† la bonne position
    let notInWord = [];  // lettres absentes du mot secret
    let missplaced = [];  // pr√©sentes dans le mot mais √† une mauvaise position

	// on convertit les deux mots en minuscules avant de les comparer
	const lowerWord = word.toLowerCase();
	const lowerBase = base.toLowerCase();

	// on compare les mots. meme si mot devin√©, on renvoie un objet pour que guess() puisse acc√®der aux propri√©t√©s
	if (lowerWord === lowerBase) {
		return { wellPlaced: lowerWord.split(''), missplaced: [], notInWord: [] }; // Renvoie un objet m√™me en cas de victoire
  } else {                 // si le mot n'est pas correct on analyse les lettres
	let arrayBase = lowerBase.split('');  // on cr√©e des tableaux avec les lettres du mot base et word
	let arrayWord = lowerWord.split('');
	let baseCounts = {};  // baseCounts et wordCounts sont des objets qui vont servir √† compter les occurrences de chaque lettre dans les 2 mots
	let wordCounts = {};
	
	// Compter les occurrences des lettres dans base
	for (const char of arrayBase) {
		baseCounts[char] = (baseCounts[char] || 0) + 1;
	}
	// Cette boucle for...of parcourt chaque lettre (char) du tableau arrayBase.
	// Pour chaque lettre, on met √† jour son compte dans l'objet baseCounts.
	// (baseCounts[char] || 0) + 1 signifie : si la lettre char existe d√©j√† comme cl√© dans baseCounts, on prend sa valeur actuelle et on l'incr√©mente de 1.
	// Sinon (si c'est la premi√®re fois qu'on voit cette lettre), on utilise 0 comme valeur par d√©faut et on l'incr√©mente √† 1.

	// Identifier les lettres bien plac√©es
	for (let i = 0; i < arrayBase.length; i++) {
	if (arrayBase[i] === arrayWord[i]) {
		wellPlaced.push(arrayWord[i]);
		wordCounts[arrayWord[i]] = (wordCounts[arrayWord[i]] || 0) + 1;
		}
	}
	// Cette boucle for parcourt les lettres des deux mots en utilisant leur index (i).
	// Si la lettre √† la m√™me position dans arrayBase et arrayWord est identique, cela signifie que la lettre est bien plac√©e.
	// On l'ajoute au tableau wellPlaced et on incr√©mente son compte dans wordCounts.

	// Identifier les lettres mal plac√©es et celles qui ne sont pas dans le mot
	for (let i = 0; i < arrayWord.length; i++) {
	if (arrayBase.includes(arrayWord[i])) {
		if (arrayBase[i] !== arrayWord[i]) { // Si pas bien plac√©
			wordCounts[arrayWord[i]] = (wordCounts[arrayWord[i]] || 0) + 1;
			if (wordCounts[arrayWord[i]] <= baseCounts[arrayWord[i]]) {
				missplaced.push(arrayWord[i]);
			}
		}
	} else {
		notInWord.push(arrayWord[i]);
		}
	}
	// Cette boucle parcourt chaque lettre du mot entr√© (tableau arrayWord).
	// if (arrayBase.includes(arrayWord[i])): On v√©rifie si la lettre actuelle du mot entr√© (arrayWord[i]) existe dans le mot secret (arrayBase).
	// if (arrayBase[i] !== arrayWord[i]): Si la lettre est pr√©sente dans le mot secret mais n'est pas √† la m√™me position que dans le mot entr√©, elle est potentiellement mal plac√©e.
	// wordCounts[arrayWord[i]] = (wordCounts[arrayWord[i]] || 0) + 1;: On incr√©mente le compteur de cette lettre dans wordCounts.
	// if (wordCounts[arrayWord[i]] <= baseCounts[arrayWord[i]]): On v√©rifie si le nombre d'occurrences de cette lettre dans le mot entr√© n'exc√®de pas son nombre d'occurrences dans le mot secret. Si c'est le cas, cela signifie que cette occurrence de la lettre est effectivement mal plac√©e, et on l'ajoute au tableau missplaced.
	// Cette v√©rification est importante pour ne pas marquer comme "mal plac√©es" des lettres qui apparaissent plus de fois dans la proposition que dans le mot secret.
	// else { notInWord.push(arrayWord[i]); }: Si la lettre du mot entr√© n'est pas du tout pr√©sente dans le mot secret, on l'ajoute au tableau notInWord.

	// Suppression des doublons dans les tableaux missplaced et notInWord (OPTIONNEL)
	missplaced = [...new Set(missplaced)];
	notInWord = [...new Set(notInWord)];
	// On utilise l'objet Set pour cr√©er une collection de valeurs uniques √† partir des tableaux missplaced et notInWord, puis on utilise l'op√©rateur spread (...)
	// pour reconvertir le Set en un nouveau tableau sans doublons.
	// C'est utile pour ne pas afficher la m√™me lettre plusieurs fois dans les indications "Mal plac√©" ou "Pas dans le mot".

	return { wellPlaced: wellPlaced, missplaced: missplaced, notInWord: notInWord };
	}
	// La fonction renvoie un objet contenant les trois tableaux : wellPlaced, missplaced, et notInWord.
	// Ces informations seront utilis√©es par la fonction guess() pour afficher les indices √† l'utilisateur.
}


function guess() {
	let base = 'dictionnaire'
	let word = document.getElementById("word").value  // on r√©cup√®re le mot saisi
	let result = tryWord(word, base)  // on appelle la fonction tryWord, le r√©sultat est stock√© dans la variable result
  	document.getElementById("word").value = ''  // on efface le champ de saisie
 	document.getElementById("try").innerText = word  // on ins√®re le mot saisi dans le champ try pour le visualiser
	document.getElementById("well").innerText = 'Bien plac√©: '+result.wellPlaced.join(', ')
	document.getElementById("miss").innerText = 'Mal plac√©: '+result.missplaced.join(', ')
	document.getElementById("not").innerText = 'Pas dans le mot: '+result.notInWord.join(', ')
	// result.wellPlaced est un tableau
	// la m√©thode "array" join(',') transforme le tableau wellPlaced [] en chaine.
	// L'argument pass√© (virgule) est le s√©parateur qui sera ins√©r√© entre chaque √©l√©ment du tableau dans la chaine resultante
	// console.log("test fonction guess");
		if(word.toLowerCase() === base.toLowerCase()){
			document.getElementById("win").innerText = 'Vous avez gagn√© ! üéâ üéà'
		}else{
			document.getElementById("win").innerText = '';  // S'assurer que le message de victoire disparaisse si ce n'est pas gagn√©
		}
}

// guess() est appel√© au click du bouton pour g√©rer la soumission du mot propos√©